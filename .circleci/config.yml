version: 2.1

workflows:
  version: 2
  
  # System 2: 10invisible - Every 4 hours (01:00, 05:00, 09:00... WAT)
  system2-schedule:
    triggers:
      - schedule:
          cron: "0 0,4,8,12,16,20 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - trigger-10invisible

  # System 3: 7unreliable - Every 4 hours (03:00, 07:00, 11:00... WAT)
  system3-schedule:
    triggers:
      - schedule:
          cron: "0 2,6,10,14,18,22 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - trigger-7unreliable

  # Manual trigger for testing
  manual-test:
    jobs:
      - trigger-10invisible
      - trigger-7unreliable

jobs:
  trigger-10invisible:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install Kaggle API
          command: pip install --quiet kaggle
      - run:
          name: Configure Kaggle Credentials
          command: |
            mkdir -p ~/.kaggle
            echo "{\"username\":\"${KAGGLE_USERNAME}\",\"key\":\"${KAGGLE_KEY}\"}" > ~/.kaggle/kaggle.json
            chmod 600 ~/.kaggle/kaggle.json
      - run:
          name: Create Trigger Script
          command: |
            cat << 'EOF' > /tmp/trigger_script.py
import subprocess
import os

def trigger_notebook(notebook_slug):
    print(f"📥 Pulling {notebook_slug} notebook...")
    pull_cmd = [
        'kaggle', 'kernels', 'pull', notebook_slug,
        '-p', '/tmp/kaggle_trigger', '--force'
    ]
    
    pull_result = subprocess.run(pull_cmd, capture_output=True, text=True)
    
    if pull_result.returncode == 0:
        print("✅ Notebook pulled successfully")
        
        print(f"📤 Pushing {notebook_slug} to trigger execution...")
        push_cmd = [
            'kaggle', 'kernels', 'push',
            '-p', '/tmp/kaggle_trigger'
        ]
        
        push_result = subprocess.run(push_cmd, capture_output=True, text=True, timeout=300)
        
        if push_result.returncode == 0:
            print(f"✅ {notebook_slug} triggered successfully!")
        else:
            print(f"⚠️ Push completed with status: {push_result.returncode}")
            print(f"Output: {push_result.stdout}")
            if push_result.stderr:
                print(f"Errors: {push_result.stderr}")
    else:
        print(f"❌ Failed to pull notebook: {pull_result.stderr}")

# Trigger 10invisible
trigger_notebook("solomonoffor/10invisible")
EOF
      - run:
          name: Trigger 10invisible
          command: |
            echo "🚀 Triggering 10invisible notebook..."
            echo "📅 Time: $(date)"
            mkdir -p /tmp/kaggle_trigger
            python /tmp/trigger_script.py
            echo "✅ 10invisible trigger completed!"
          no_output_timeout: 10m
      - run:
          name: Display Status
          command: |
            echo "🎉 10invisible Status:"
            echo "   ✅ Notebook triggered"
            echo "   🔗 Check: https://www.kaggle.com/code/solomonoffor/10invisible"
            echo "   ⏰ Next run: 4 hours"

  trigger-7unreliable:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install Kaggle API
          command: pip install --quiet kaggle
      - run:
          name: Configure Kaggle Credentials
          command: |
            mkdir -p ~/.kaggle
            echo "{\"username\":\"${KAGGLE_USERNAME}\",\"key\":\"${KAGGLE_KEY}\"}" > ~/.kaggle/kaggle.json
            chmod 600 ~/.kaggle/kaggle.json
      - run:
          name: Create Trigger Script
          command: |
            cat << 'EOF' > /tmp/trigger_script.py
import subprocess
import os

def trigger_notebook(notebook_slug):
    print(f"📥 Pulling {notebook_slug} notebook...")
    pull_cmd = [
        'kaggle', 'kernels', 'pull', notebook_slug,
        '-p', '/tmp/kaggle_trigger', '--force'
    ]
    
    pull_result = subprocess.run(pull_cmd, capture_output=True, text=True)
    
    if pull_result.returncode == 0:
        print("✅ Notebook pulled successfully")
        
        print(f"📤 Pushing {notebook_slug} to trigger execution...")
        push_cmd = [
            'kaggle', 'kernels', 'push',
            '-p', '/tmp/kaggle_trigger'
        ]
        
        push_result = subprocess.run(push_cmd, capture_output=True, text=True, timeout=300)
        
        if push_result.returncode == 0:
            print(f"✅ {notebook_slug} triggered successfully!")
        else:
            print(f"⚠️ Push completed with status: {push_result.returncode}")
            print(f"Output: {push_result.stdout}")
            if push_result.stderr:
                print(f"Errors: {push_result.stderr}")
    else:
        print(f"❌ Failed to pull notebook: {pull_result.stderr}")

# Trigger 7unreliable
trigger_notebook("solomonoffor/7unreliable")
EOF
      - run:
          name: Trigger 7unreliable
          command: |
            echo "🚀 Triggering 7unreliable notebook..."
            echo "📅 Time: $(date)"
            mkdir -p /tmp/kaggle_trigger
            python /tmp/trigger_script.py
            echo "✅ 7unreliable trigger completed!"
          no_output_timeout: 10m
      - run:
          name: Display Status
          command: |
            echo "🎉 7unreliable Status:"
            echo "   ✅ Notebook triggered"
            echo "   🔗 Check: https://www.kaggle.com/code/solomonoffor/7unreliable"
            echo "   ⏰ Next run: 4 hours"
